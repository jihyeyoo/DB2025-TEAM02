package DB2025Team02GUI;

import DB2025Team02DAO.MyStudyDetailDAO;
import DB2025Team02DTO.MyStudyDetailDTO;
import DB2025Team02DTO.StudyMemberDTO;
import DB2025Team02DTO.RuleDTO;
import DB2025Team02DTO.UserDTO;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.table.*;
import java.awt.*;
import java.util.List;

public class MyStudyDetailPage extends JFrame {

    private MyStudyDetailDAO dao = new MyStudyDetailDAO();

    private JFrame previousPage;

    public MyStudyDetailPage(int studyId, UserDTO user, JFrame previousPage) {
        this.previousPage = previousPage;

        setTitle("üìò ÎßàÏù¥Ïä§ÌÑ∞Îîî ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄ");
        setSize(1000, 700);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        MyStudyDetailDTO summary = dao.getStudySummary(studyId);
        List<StudyMemberDTO> members = dao.getMemberList(studyId);
        RuleDTO rule = dao.getRuleInfo(studyId);
        boolean isLeader = dao.isLeader(user, studyId);

        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 30, 5)); // Ï¢åÏ∏° Ï†ïÎ†¨, Í∞ÑÍ≤© Ï∂îÍ∞Ä
        topPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));

        Font baseFont = UIManager.getFont("Label.font");
        Font largeFont = baseFont.deriveFont(baseFont.getSize() + 4.0f);

        JLabel nameLabel = new JLabel("üìå Ïä§ÌÑ∞ÎîîÎ™Ö: " + summary.getStudyName());
        nameLabel.setFont(largeFont);
        topPanel.add(nameLabel);

        JLabel memberLabel = new JLabel("üë• Ï∞∏Ïó¨ Ïù∏Ïõê: " + summary.getMemberCount());
        memberLabel.setFont(largeFont);
        topPanel.add(memberLabel);

        JLabel fineLabel = new JLabel("üí∏ Ï¥ù Î≤åÍ∏à: " + summary.getTotalFine() + "Ïõê");
        fineLabel.setFont(largeFont);
        topPanel.add(fineLabel);

        add(topPanel, BorderLayout.NORTH);


        String[] cols = isLeader ? new String[]{"Ïä§ÌÑ∞ÎîîÏõê", "ÎàÑÏ†Å Î≤åÍ∏à", "Í¥ÄÎ¶¨"} : new String[]{"Ïù¥Î¶Ñ", "ÎàÑÏ†Å Î≤åÍ∏à"};
        DefaultTableModel model = new DefaultTableModel(cols, 0) {
            public boolean isCellEditable(int row, int column) {
                return isLeader && column == 2;
            }
        };

        JTable table = new JTable(model);
        table.setRowHeight(40);
        JTableHeader header = table.getTableHeader();
        header.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.BOLD, 16));
        header.setPreferredSize(new Dimension(header.getWidth(), 50));
        table.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 16));

        for (StudyMemberDTO m : members) {
            if (isLeader) {
                if (m.getUserId() == user.getUserId()) {
                    JButton dummyBtn = new JButton("Í∞ïÌá¥");
                    dummyBtn.setEnabled(false);
                    model.addRow(new Object[]{m.getUserName(), m.getAccumulatedFine(), dummyBtn});
                }else{
                    JButton kickBtn = new JButton("Í∞ïÌá¥");
                    kickBtn.setForeground(Color.RED);
                    kickBtn.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 14));
                    kickBtn.addActionListener(e -> {
                        int confirm = JOptionPane.showConfirmDialog(this,
                                m.getUserName() + "ÎãòÏùÑ Í∞ïÌá¥ÌïòÏãúÍ≤†ÏäµÎãàÍπå?", "ÌôïÏù∏", JOptionPane.YES_NO_OPTION);
                        if (confirm == JOptionPane.YES_OPTION) {
                            boolean success = dao.kickMember(studyId, m.getUserId());
                            if (success) {
                                JOptionPane.showMessageDialog(this, m.getUserName() + " Í∞ïÌá¥ ÏôÑÎ£å");
                                dispose();  // ÌòÑÏû¨ ÌéòÏù¥ÏßÄ Îã´Í≥†
                                new MyStudyDetailPage(studyId, user, previousPage); // ÏÉàÎ°úÍ≥†Ïπ®
                            } else {
                                JOptionPane.showMessageDialog(this, "Í∞ïÌá¥ Ïã§Ìå®. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.");
                            }
                        }
                    });

                    model.addRow(new Object[]{m.getUserName(), m.getAccumulatedFine(), kickBtn});
                }


            } else {
                model.addRow(new Object[]{m.getUserName(), m.getAccumulatedFine()});
            }
        }


        if (isLeader) {
            table.getColumn("Í¥ÄÎ¶¨").setCellRenderer(new ButtonRenderer());
            table.getColumn("Í¥ÄÎ¶¨").setCellEditor(new ButtonEditor(new JCheckBox()));
        }

        add(new JScrollPane(table), BorderLayout.CENTER);

        JPanel bottomPanel = new JPanel(new BorderLayout());

        JPanel rulePanel = new JPanel(new GridLayout(0, 1));
        Font titleFont = new Font("ÎßëÏùÄ Í≥†Îîï", Font.BOLD, 20);
        TitledBorder titleBorder = BorderFactory.createTitledBorder("Ïä§ÌÑ∞Îîî Í∑úÏπô");
        titleBorder.setTitleFont(titleFont);
        titleBorder.setTitleJustification(TitledBorder.LEFT); // ÏôºÏ™Ω Ï†ïÎ†¨
        titleBorder.setTitlePosition(TitledBorder.TOP);
        rulePanel.setBorder(titleBorder);

        Font ruleFont = new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 16);

        if (rule != null) {
            JLabel label1 = new JLabel("Ïù∏Ï¶ù ÎßàÍ∞ê ÏãúÍ∞Å: " + rule.getCertDeadline());
            label1.setFont(ruleFont);
            rulePanel.add(label1);

            JLabel label2 = new JLabel("Ïù∏Ï¶ù Ï£ºÍ∏∞: " + rule.getCertCycle() + "Ïùº");
            label2.setFont(ruleFont);
            rulePanel.add(label2);

            JLabel label3 = new JLabel("Ïú†Ïòà Í∏∞Í∞Ñ: " + rule.getGracePeriod() + "Ïùº");
            label3.setFont(ruleFont);
            rulePanel.add(label3);

            JLabel label4 = new JLabel("ÏßÄÍ∞Å Î≤åÍ∏à: " + rule.getFineLate() + "Ïõê");
            label4.setFont(ruleFont);
            rulePanel.add(label4);

            JLabel label5 = new JLabel("ÎØ∏Ïù∏Ï¶ù Î≤åÍ∏à: " + rule.getFineAbsent() + "Ïõê");
            label5.setFont(ruleFont);
            rulePanel.add(label5);

            JLabel label6 = new JLabel("Î≥¥Ï¶ùÍ∏à Ï†ïÏÇ∞ Ï£ºÍ∏∞: " + rule.getPtSettleCycle() + "Ïùº");
            label6.setFont(ruleFont);
            rulePanel.add(label6);
        } else {
            JLabel noRuleLabel = new JLabel("Í∑úÏπô Ï†ïÎ≥¥ ÏóÜÏùå.");
            noRuleLabel.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 18)); // Í∞ïÏ°∞Ïö©
            rulePanel.add(noRuleLabel);
        }


        rulePanel.setBorder(BorderFactory.createCompoundBorder(
                titleBorder,
                BorderFactory.createEmptyBorder(10, 20, 20, 20) // ÎÇ¥Î∂Ä Ïó¨Î∞±: ÏÉÅ, Ï¢å, Ìïò, Ïö∞
        ));


        bottomPanel.add(rulePanel, BorderLayout.CENTER);

        JPanel backPanel = new JPanel();
        JButton backButton = new JButton("‚Üê Îí§Î°ú Í∞ÄÍ∏∞");
        backButton.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 18));
        backButton.setFocusPainted(false);
        backButton.setBackground(Color.LIGHT_GRAY);
        backButton.setForeground(Color.BLACK);
        backPanel.add(backButton);
        bottomPanel.add(backPanel, BorderLayout.SOUTH);

        backButton.addActionListener(e -> {
            dispose();
            previousPage.setVisible(true);
        });

        add(bottomPanel, BorderLayout.SOUTH);
        bottomPanel.setBorder(BorderFactory.createEmptyBorder(20, 30, 0, 30));


        setVisible(true);
    }

    class ButtonRenderer implements TableCellRenderer {
        public Component getTableCellRendererComponent(JTable table, Object value,
                                                       boolean isSelected, boolean hasFocus,
                                                       int row, int column) {
            return (Component) value;
        }
    }

    class ButtonEditor extends DefaultCellEditor {
        private JButton button;

        public ButtonEditor(JCheckBox checkBox) {
            super(checkBox);
        }

        public Component getTableCellEditorComponent(JTable table, Object value,
                                                     boolean isSelected, int row, int column) {
            button = (JButton) value;
            return button;
        }

        public Object getCellEditorValue() {
            return button;
        }
    }
}
